// Coshub 数据库模型
// 二次元交流网站核心数据结构

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  nickname    String?
  avatar      String?
  bio         String?
  level       UserLevel @default(NEWBIE)
  role        UserRole  @default(USER)
  verified    Boolean  @default(false)
  reputation  Int      @default(100)
  city        String?  @db.VarChar(50)
  lat         Float?   @db.DoublePrecision
  lng         Float?   @db.DoublePrecision
  preferredCity String? @db.VarChar(50)
  
  // 统计数据
  viewCount   Int      @default(0)
  followerCount Int    @default(0)
  followingCount Int   @default(0)
  
  // 联系方式
  wechat      String?
  qq          String?
  phone       String?
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  // 关联关系
  skillPosts  SkillPost[]
  requests    Request[]
  posts       Post[]
  reports     Report[]  @relation("UserReports")
  comments    Comment[] @relation("UserComments")
  
  @@map("users")
}

// 技能帖表
model SkillPost {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(200)
  description String   @db.Text
  category    SkillCategory
  role        SkillRole
  experience  ExperienceLevel
  city        String   @db.VarChar(50)
  lat         Float?   @db.DoublePrecision
  lng         Float?   @db.DoublePrecision
  geohash     String?  @db.VarChar(16)
  
  // 价格信息 (JSON)
  price       Json
  
  // 图片和标签
  images      String[]
  tags        String[]
  
  // 可用性信息 (JSON)
  availability Json
  
  // 联系方式 (JSON)
  contactInfo Json
  
  // 状态和统计
  status      PostStatus @default(ACTIVE)
  viewCount   Int      @default(0)
  favoriteCount Int    @default(0)
  contactCount Int     @default(0)
  likeCount   Int      @default(0)
  
  // 质量评分
  avgRating   Float    @default(0)
  reviewCount Int      @default(0)
  responseRate Int     @default(100)
  
  // 关联用户
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  // 关联关系
  requests    Request[]
  
  @@map("skill_posts")
  @@index([category])
  @@index([role])
  @@index([city])
  @@index([geohash])
  @@index([status])
  @@index([createdAt])
}

// 请求表 (求助/合作请求)
model Request {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(200)
  description String   @db.Text
  type        RequestType
  category    SkillCategory?
  city        String?  @db.VarChar(50)
  
  // 预算信息 (JSON)
  budget      Json?
  
  // 时间要求
  deadline    DateTime?
  urgency     UrgencyLevel @default(NORMAL)
  
  // 图片和标签
  images      String[]
  tags        String[]
  
  // 状态和统计
  status      RequestStatus @default(OPEN)
  viewCount   Int      @default(0)
  responseCount Int    @default(0)
  
  // 关联用户
  requesterId String
  requester   User     @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  
  // 关联技能帖 (可选)
  skillPostId String?
  skillPost   SkillPost? @relation(fields: [skillPostId], references: [id], onDelete: SetNull)
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@map("requests")
  @@index([type])
  @@index([category])
  @@index([city])
  @@index([status])
  @@index([createdAt])
}

// 内容帖表 (分享、讨论等)
model Post {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(200)
  content     String   @db.Text
  type        PostType
  category    PostCategory?
  city        String?  @db.VarChar(50)
  lat         Float?   @db.DoublePrecision
  lng         Float?   @db.DoublePrecision
  geohash     String?  @db.VarChar(12)
  
  // 媒体内容
  images      String[]
  videos      String[]
  
  // 标签
  tags        String[]
  
  // 地理信息
  city        String?  @db.VarChar(50)
  lat         Float?
  lng         Float?
  geohash     String?  @db.VarChar(12)
  
  // 状态和统计
  status      PostStatus @default(ACTIVE)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  commentCount Int     @default(0)
  shareCount  Int      @default(0)
  
  // 关联用户
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@map("posts")
  @@index([type])
  @@index([category])
  @@index([city])
  @@index([status])
  @@index([createdAt])
}

// 举报表
model Report {
  id          String   @id @default(cuid())
  type        ReportType
  targetType  ReportTargetType
  targetId    String
  reason      ReportReason
  description String   @db.Text
  content     String?  @db.Text
  
  // 举报人信息
  reporterId  String
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  
  // 证据
  evidence    String[]
  
  // 内容安全检查结果
  contentCheckResult Json?
  
  // 状态
  status      ReportStatus @default(PENDING)
  
  // 处理信息
  processedBy String?
  processedAt DateTime?
  processNote String?  @db.Text
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  violationLogs ContentViolationLog[]
  
  @@map("reports")
  @@index([type])
  @@index([targetType])
  @@index([status])
  @@index([createdAt])
}

// Banner表
model Banner {
  id          String   @id @default(cuid())
  scene       BannerScene
  imageUrl    String   @db.VarChar(500)
  linkType    BannerLinkType
  linkUrl     String   @db.VarChar(500)
  priority    Int      @default(0)
  online      Boolean  @default(true)
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("banners")
  @@index([scene])
  @@index([online])
  @@index([priority])
  @@index([createdAt])
}

// 评论表
model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  
  // 评论目标
  targetType  CommentTargetType
  targetId    String
  
  // 评论人信息
  authorId    String
  author      User     @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  
  // 父评论（回复）
  parentId    String?
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  
  // 状态
  status      CommentStatus @default(ACTIVE)
  
  // 统计
  likeCount   Int      @default(0)
  
  // 系统字段
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  @@map("comments")
  @@index([targetType])
  @@index([targetId])
  @@index([parentId])
  @@index([status])
  @@index([createdAt])
}

// 事件记录表
model Event {
  id          String   @id @default(cuid())
  type        String   @db.VarChar(50)
  targetType  String?  @db.VarChar(50)
  targetId    String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@map("events")
  @@index([type])
  @@index([targetType])
  @@index([targetId])
  @@index([createdAt])
}

// 内容违规日志表
model ContentViolationLog {
  id          String   @id @default(cuid())
  reportId    String
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // 违规内容
  content     String   @db.Text
  contentType String
  
  // 检查结果
  checkResult Json
  
  // 系统字段
  createdAt   DateTime @default(now())
  
  @@map("content_violation_logs")
  @@index([reportId])
  @@index([createdAt])
}

// 枚举定义
enum UserLevel {
  NEWBIE      // 新手
  BEGINNER    // 初级
  INTERMEDIATE // 中级
  ADVANCED    // 高级
  PROFESSIONAL // 专业
  EXPERT      // 专家
}

enum UserRole {
  USER        // 普通用户
  COSER       // Coser
  PHOTOGRAPHER // 摄影师
  MAKEUP_ARTIST // 妆娘
  WIG_MAKER   // 毛娘
  PROP_MAKER  // 道具师
  MODERATOR   // 版主
  ADMIN       // 管理员
}

enum SkillCategory {
  COSPLAY
  PHOTOGRAPHY
  MAKEUP
  PROP_MAKING
  COSTUME_MAKING
  POST_PROCESSING
  VIDEO_EDITING
  VOICE_ACTING
  DRAWING
  WRITING
  DANCING
  SINGING
}

enum SkillRole {
  COSER
  PHOTOGRAPHER
  MAKEUP_ARTIST
  PROP_MAKER
  COSTUME_MAKER
  LOCATION_OWNER
  POST_PROCESSOR
  VIDEOGRAPHER
  ORGANIZER
}

enum ExperienceLevel {
  NEWBIE
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum PostStatus {
  DRAFT       // 草稿
  ACTIVE      // 活跃
  INACTIVE    // 停用
  DELETED     // 删除
}

enum RequestType {
  COSPLAY     // Cosplay 请求
  SKILL       // 技能求助
  COLLABORATION // 合作请求
  EVENT       // 活动组织
}

enum RequestStatus {
  OPEN        // 开放
  IN_PROGRESS // 进行中
  COMPLETED   // 已完成
  CANCELLED   // 已取消
  CLOSED      // 已关闭
}

enum UrgencyLevel {
  LOW         // 低
  NORMAL      // 普通
  HIGH        // 高
  URGENT      // 紧急
}

enum PostType {
  SHARE       // 分享
  DISCUSSION  // 讨论
  TUTORIAL    // 教程
  NEWS        // 资讯
  EVENT       // 活动
}

enum PostCategory {
  COSPLAY_SHOW    // Cosplay 展示
  TUTORIAL        // 教程分享
  EVENT_REPORT    // 活动报告
  DISCUSSION      // 话题讨论
  NEWS            // 圈内资讯
  RESOURCE        // 资源分享
}

// 举报相关枚举
enum ReportType {
  INAPPROPRIATE_CONTENT  // 不当内容
  SPAM                   // 垃圾信息
  HARASSMENT             // 骚扰行为
  COPYRIGHT_VIOLATION    // 版权侵犯
  FAKE_INFORMATION       // 虚假信息
  OTHER                  // 其他
}

enum ReportTargetType {
  SKILL_POST     // 技能帖
  POST           // 帖子
  COMMENT        // 评论
  USER           // 用户
  OTHER          // 其他
}

enum ReportReason {
  INAPPROPRIATE  // 不当内容
  SPAM           // 垃圾信息
  HARASSMENT     // 骚扰
  COPYRIGHT      // 版权问题
  FAKE           // 虚假信息
  VIOLENCE       // 暴力内容
  SEXUAL         // 色情内容
  OTHER          // 其他
}

enum ReportStatus {
  PENDING        // 待处理
  PROCESSING     // 处理中
  RESOLVED       // 已解决
  REJECTED       // 已驳回
  CLOSED         // 已关闭
}

// Banner相关枚举
enum BannerScene {
  FEED           // 交流区
  SKILLS         // 技能区
  HOME           // 首页
}

enum BannerLinkType {
  EXTERNAL       // 外部链接
  INTERNAL       // 内部链接
}

// 评论相关枚举
enum CommentTargetType {
  SKILL_POST     // 技能帖
  POST           // 帖子
  USER           // 用户
}

enum CommentStatus {
  ACTIVE         // 活跃
  HIDDEN         // 隐藏
  DELETED        // 已删除
}
